file = statements, ?Eof?;

statements = { statement };
statement = ( res_directive | start_directive | label_directive | instruction | macro ), "\n";

res_directive = ".res", ?Identifier?, type_directive, [ assignment ];
type_directive = byte_directive | bytes_directive | arr_directive;
byte_directive = ".byte";
bytes_directive = ".bytes", ?Number?;
arr_directive = ".arr", number_literal, type_directive;
assignment = "{", assignment_values, "}", [ assignment_repetition ];
assignment_repetition = "*", [?Number?];
assignment_values = { assignment_value };
assignment_value = ?Number? | ?String? | assignment;

start_directive = ".start", ":";

label_directive = ?Identifier?, ":";

instruction = ?TokenInstruction?, [ condition_code ], instruction_arguments;
condition_code = ":", ?ConditionCode?;
instruction_arguments = { instruction_argument };
instruction_argument = ?Register? | ?SystemRegister? | ?Port? | ?Number? | ?String? | long_register;
long_register = ?Register?, "~";

macro = ?Macro?, [ condition_code ], macro_arguments;
macro_arguments = { macro_argument };
macro_argument = ?Register? | ?Number? | long_register | ?Identifier?;


